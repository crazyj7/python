'''
foutier transform
'''

import numpy as np
import matplotlib.pyplot as plt

pts='[(196,160,0)(194,160,10)(190,159,20)(184,158,30)(180,156,40)(175,153,50)(168,151,60)(165,149,70)(160,145,80)(156,141,90)(151,136,100)(147,128,110)(143,123,120)(141,116,130)(139,109,140)(136,101,150)(135,93,160)(135,86,170)(135,79,180)(137,71,190)(139,65,200)(142,58,210)(146,51,220)(147,50,230)(151,43,240)(154,38,250)(157,35,260)(165,32,270)(168,29,280)(175,26,290)(187,22,300)(203,20,310)(220,18,320)(221,18,330)(233,17,340)(250,17,350)(269,19,360)(276,23,370)(282,25,380)(290,31,390)(295,34,400)(299,38,410)(303,43,420)(309,55,430)(314,64,440)(317,72,450)(317,84,460)(315,94,470)(311,101,480)(310,106,490)(308,111,500)(306,117,510)(302,124,520)(300,129,530)(298,134,540)(294,138,550)(290,144,560)(283,147,570)(271,150,580)(260,153,590)(254,155,600)(246,156,610)(239,156,620)(230,157,630)(228,157,640)(220,158,650)(211,158,660)(195,158,670)(187,158,680)(193,150,690)(201,138,700)(209,123,710)(218,109,720)(227,96,730)(233,82,740)(241,67,750)(245,58,760)(249,50,770)(254,40,780)(256,34,790)(258,30,800)(259,28,810)(263,24,820)(265,19,830)(264,19,840)(251,25,850)(244,33,860)(239,42,870)(234,49,880)(226,58,890)(219,65,900)(206,75,910)(197,80,920)(187,83,930)(175,87,940)(169,89,950)(158,93,960)(148,97,970)(140,99,980)(140,100,990)(161,102,1000)(173,102,1010)(187,102,1020)(206,102,1030)(217,100,1040)(232,101,1050)(249,101,1060)(262,101,1070)(268,101,1080)(289,102,1090)(297,103,1100)(298,103,1110)(309,103,1120)(309,102,1130)(297,96,1140)(284,90,1150)(281,88,1160)(271,83,1170)(263,78,1180)(254,72,1190)(242,64,1200)(231,57,1210)(224,53,1220)(214,45,1230)(207,40,1240)(206,40,1250)(195,33,1260)(191,30,1270)(186,25,1280)(187,38,1290)(190,49,1300)(191,56,1310)(192,66,1320)(194,78,1330)(194,87,1340)(195,97,1350)(195,108,1360)(195,116,1370)(195,124,1380)(195,129,1390)(195,135,1400)(192,143,1410)(191,148,1420)(191,153,1430)(190,160,1440)(190,161,1450)(190,164,1460)(190,169,1470)(191,171,1480)(191,172,1490)(190,173,1500)(173,172,1510)(157,170,1520)(142,166,1530)(129,164,1540)(117,161,1550)(105,160,1560)(98,158,1570)(99,144,1580)(99,127,1590)(99,111,1600)(98,95,1610)(98,79,1620)(100,64,1630)(102,59,1640)(103,50,1650)(103,42,1660)(103,38,1670)(102,29,1680)(100,23,1690)(100,18,1700)(112,17,1710)(116,17,1720)(140,17,1730)(158,16,1740)(169,15,1750)(185,13,1760)(205,13,1770)(210,13,1780)(218,12,1790)(231,11,1800)(245,10,1810)(256,10,1820)(262,9,1830)(280,10,1840)(295,13,1850)(304,15,1860)(305,15,1870)(323,18,1880)(330,18,1890)(333,19,1900)(333,34,1910)(333,40,1920)(333,51,1930)(332,66,1940)(332,81,1950)(332,88,1960)(330,98,1970)(330,110,1980)(330,122,1990)(330,132,2000)(330,146,2010)(332,158,2020)(333,171,2030)(335,173,2040)(325,177,2050)(300,175,2060)(282,174,2070)(269,172,2080)(252,172,2090)(233,172,2100)(224,171,2110)(211,171,2120)(203,171,2130)(194,171,2140)(193,171,2150)(191,171,2160)(192,172,2170)(193,173,2180)]'


def ss_reverseY(sign):
    '''reverse Y axis.
    '''
    matmax = []
    matmin = []
    for seg in sign:
        matmax.append(np.max(seg, 0))
        matmin.append(np.min(seg, 0))
    rmax = np.max(matmax, 0)
    rmin = np.min(matmin, 0)
    for seg in sign:
        # y axis reverse!
        seg[:, 1] = rmax[1] - seg[:, 1] + rmin[1]
    return sign



# snsign : [(1,2,3)(4,5,6)(1,1,1)][(1,1,1)(2,2,2)]
def parse_signdata(snsign, breversey=True):
    '''parsing sign data
    input : SN type ; [segment(x,y,t),...][segment(x,y,t),..]..
    output: sign(list)
    '''
    snsign = snsign.rstrip()  # remove CR, space char
    sign = []
    tmp1 = snsign.replace('[', '')  # remove [ char
    tmp1 = tmp1.rstrip(']')  # remove last ] char
    tmp1 = tmp1.split(']')
    if type(tmp1) == str:
        tmp1 = [tmp1]
    for node in tmp1:
        node = node.replace('(', '')
        node = node.replace(')', ' ')
        node = node.replace(',', ' ')
        ml = np.fromstring(node, dtype=float, sep=' ').reshape(-1, 3)
        sign.append(ml)

    if len(sign) == 0 or (len(sign) == 1 and len(sign[0]) == 0):
        return None

    # reverse Y
    if breversey:
        sign = ss_reverseY(sign)

    return sign


sign = parse_signdata(pts)
sign = np.asarray(sign)[0]  # first drawing (1 count)

signmin = np.min(sign, axis=0)
# zero-base. positive number
sign = sign-signmin
# normalzie.
signsize = np.max(sign, axis=0)
# x,y range [0,2]
sign[:,0] /= signsize[0]/2
sign[:,1] /= signsize[1]/2
sign[:,2] /= signsize[2]
# x,y range [-1,1]
sign[:,0] -= 1
sign[:,1] -= 1


# print('sign=',sign)
print(sign.shape)

print('x=', sign[:,0])
print('t=', sign[:,2])

txlist = []
for tt in zip(sign[:,2], sign[:,0]):
    txlist.append(tt)
# tx = np.array( [sign[:,2], sign[:,0]] )
# print(tx)
print(txlist)

txlist = np.asarray(txlist)

plt.figure()
plt.scatter(txlist[:,0], txlist[:,1])
plt.show()
