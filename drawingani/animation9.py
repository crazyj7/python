'''

그림 그리는 과정 저장 내역을 보고
애니매이션으로 재생 (matplotlib의 plot 사용)

drawing.py : make drawingimage.txt
animation9.py : load drawingimage.txt and animate that.

'''

import matplotlib.animation as animation
import numpy as np
import matplotlib.pyplot as plt
import math

# user class
from drawing import PaintBrush

ax1=None
ani=None

def ani_indextosegnum(vdraw, i):
    segindex=0
    totalcnt=0
    for s in vdraw:
        totalcnt += len(s)
        if i < totalcnt :
            break
        segindex+=1
    return (segindex, i-totalcnt)

def ani_draw_animate(i, col, vrdraw, endclose, delay):
   vdraw = vrdraw.params['draw']
   # print('i=',i)
   segindex, newi = ani_indextosegnum(vdraw, i)
   if i==vrdraw.params['ptcnt']:
       print('end count')
       if endclose:
           plt.close()  # 자동으로 재생 창 닫기.
       return

   if segindex<0:
      print('end')
      # 애니매이션 중지 2가지 방법: ani.event_source.stop()   # or use frame. norepeat
      return
   # print('segindex=',segindex, 'newi=',newi)
   seg=vdraw[segindex]

   if delay==0 :
       if len(seg) <= newi+1:
          ani.event_source.interval = 10
       else:
          ani.event_source.interval = seg[newi+1, 2]- seg[newi, 2]

    # 처음부터 진행된 것 까지 다시 그림
   # return ax1.plot( seg[0:newi, 0], seg[0:newi, 1], c=col, lw=3)
   return ax1.plot( seg[newi-2:newi, 0], seg[newi-2:newi, 1], c=col, lw=3)

# yreverse : y-axis 뒤집기. (vrdraw의 좌표계는 모니터 화면 좌표계, plot은 수학 좌표계)
# endclose : 재생 완료시 화면 자동 닫기 여부
# delay : drawing 지연 시간. (0이면 user mode replay. 대략 10~100 적을수록 빠름.)
def ani_draw(vrdraw, yreverse=True, endclose=False, delay=0):
    global ax1, ani
   # vrdraw = Secudraw()
   # vrdraw.parse_drawdata(rdraw)
   # vrdraw.analyze()
    fig = plt.figure()
    ax1=fig.add_subplot(1,1,1)
    print(vrdraw.params['rmax'])
    print(vrdraw.params['rmin'])

    margin=20
    ax1.set_xlim(vrdraw.params['rmin'][0]-margin, vrdraw.params['rmax'][0]+margin)
    ax1.set_ylim(vrdraw.params['rmin'][1]-margin, vrdraw.params['rmax'][1]+margin)

    if yreverse:
        plt.gca().invert_yaxis()

    myline, = ax1.plot([],[], '-', c='k', lw=3)
    if delay==0:
        interval=10
    else:
        interval = delay

    ani=animation.FuncAnimation(fig, ani_draw_animate, 
                                frames=vrdraw.params['ptcnt']+1 ,fargs=('k', vrdraw, endclose, delay, ),
                            interval=interval, repeat=False,  blit=False)
    plt.show()


# stp = "[(192,143,0)(191,144,40)(189,144,56)(186,144,56)(185,144,62)(181,144,69)(178,144,77)(174,144,86)(171,144,93)(165,143,101)(164,142,109)(160,141,117)(158,139,125)(155,137,133)(152,135,141)(149,132,149)(145,129,157)(144,128,173)(142,127,189)(141,126,198)(141,125,205)(140,124,213)(139,123,221)(138,121,229)(137,120,246)(137,119,270)(137,118,277)(135,116,293)(135,113,309)(135,112,318)(135,111,326)(135,110,334)(135,106,342)(135,105,350)(135,101,358)(135,100,366)(135,98,373)(135,95,382)(135,92,390)(135,91,397)(136,87,406)(139,84,414)(141,81,421)(143,79,429)(146,76,438)(149,73,445)(150,72,453)(151,69,462)(155,66,469)(157,65,478)(159,63,485)(162,60,493)(163,59,501)(165,59,510)(167,57,517)(171,56,525)(173,55,533)(178,53,541)(180,52,549)(185,50,558)(187,50,565)(192,50,574)(194,49,582)(195,49,589)(199,49,598)(202,49,606)(204,49,614)(207,49,622)(210,49,629)(214,49,638)(218,49,646)(219,49,654)(220,49,662)(222,49,669)(227,49,677)(228,49,685)(232,49,694)(235,52,702)(239,54,709)(245,54,717)(248,55,726)(249,56,733)(252,59,741)(254,60,749)(255,60,757)(257,61,765)(258,62,773)(260,65,781)(261,66,789)(263,69,805)(263,70,821)(263,71,830)(265,74,845)(265,76,861)(265,77,869)(265,78,877)(265,82,885)(265,83,893)(265,86,901)(265,88,909)(265,89,917)(265,91,925)(265,92,933)(265,94,941)(265,95,957)(265,96,965)(265,98,973)(265,100,981)(265,103,989)(265,104,997)(264,106,1005)(263,107,1013)(261,110,1021)(259,113,1029)(257,114,1045)(256,116,1053)(255,117,1061)(252,120,1069)(250,123,1085)(248,124,1093)(247,125,1101)(246,126,1109)(245,127,1117)(244,129,1125)(243,130,1134)(242,131,1141)(241,132,1150)(239,133,1158)(236,133,1166)(234,134,1173)(233,134,1182)(229,136,1190)(227,138,1198)(224,138,1214)(221,140,1222)(220,140,1237)(218,140,1245)(217,140,1253)(215,140,1269)(214,140,1277)(212,140,1286)(211,140,1318)(210,141,1325)(208,141,1358)(209,142,1358)(210,143,1368)][(218,69,2261)(216,70,2318)(213,73,2326)(207,80,2333)(202,83,2341)(198,88,2350)(193,89,2357)(187,94,2365)(185,95,2373)(180,98,2382)(177,101,2389)(176,102,2397)(175,102,2405)(174,103,2413)(172,104,2429)(170,104,2446)(167,107,2453)(166,108,2469)(165,109,2493)(164,109,2557)(165,110,2605)(166,111,2615)][(178,71,2991)(179,70,3029)(183,73,3037)(186,76,3046)(190,80,3054)(195,85,3062)(198,86,3070)(202,91,3078)(207,94,3085)(208,95,3094)(210,98,3102)(212,99,3109)(213,100,3118)(214,101,3126)(215,101,3135)(217,104,3143)(219,105,3166)(220,106,3174)(221,106,3182)(222,107,3189)(223,108,3206)(224,109,3382)(225,110,3392)]"
# stp = "[(83,62,0)(83,60,23)(83,55,47)(83,52,79)(79,48,103)(75,47,127)(72,47,249)(67,47,271)(62,51,303)(60,55,327)(60,59,351)(60,67,374)(60,74,398)(60,81,423)(60,87,446)(61,92,470)(63,96,494)(65,99,534)(66,99,599)(67,99,631)(73,96,655)(83,91,678)(86,88,703)(88,85,726)(89,80,759)(90,80,790)(92,80,862)(93,81,872)][(102,53,1415)(104,53,1479)(108,55,1503)(113,66,1527)(114,81,1551)(114,91,1575)(114,97,1598)(114,90,1743)(117,72,1767)(123,60,1791)(130,52,1815)(134,51,1863)(135,51,1886)(136,52,1958)(137,53,1968)][(159,62,2310)(159,61,2383)(155,61,2407)(149,61,2431)(143,65,2454)(136,72,2487)(135,78,2510)(135,81,2535)(135,82,2568)(138,79,2679)(147,66,2703)(154,58,2734)(155,55,2822)(156,55,3183)(156,57,3288)(160,63,3313)(169,75,3336)(172,80,3359)(172,81,3535)(173,82,3558)(174,83,3568)][(173,58,3975)(173,57,4039)(179,52,4062)(190,50,4103)(191,50,4263)(188,63,4286)(180,77,4310)(173,85,4334)(171,87,4358)(170,89,4383)(173,90,4518)(190,86,4542)(203,85,4566)(204,84,4639)(202,83,4671)(203,84,4687)(204,85,4697)][(200,54,5040)(200,55,5110)(204,68,5134)(209,78,5158)(213,83,5286)(214,84,5296)][(223,56,5551)(224,56,5624)(220,68,5648)(202,92,5671)(184,111,5695)(178,116,5719)(177,116,5767)(176,116,5791)(173,116,5847)(174,117,5847)(175,118,5857)][(236,52,6527)(237,52,6566)(239,52,6591)(246,52,6614)(251,52,6639)(252,52,6735)(253,53,6735)(254,54,6745)][(245,64,7030)(245,65,7079)(245,71,7102)(242,84,7126)(236,98,7151)(230,108,7174)(225,114,7199)(217,119,7223)(212,121,7256)(211,121,7282)(206,121,7311)(201,119,7335)(201,113,7358)(202,113,7374)(203,114,7384)][(272,43,8447)(273,42,8479)(274,42,8511)(274,49,8535)(272,53,8559)(272,58,8790)(272,60,8815)(271,64,8887)(267,74,8910)(266,82,8943)(265,83,9023)(265,82,9070)(266,82,9087)(267,83,9097)][(275,50,9511)(276,49,9574)(281,49,9599)(300,49,9622)(315,47,9647)(314,49,9926)(311,52,9950)(305,59,9991)(302,63,10014)(299,71,10038)(297,76,10062)(295,82,10086)(291,89,10110)(291,101,10134)(288,114,10158)(287,120,10182)(286,122,10351)(287,123,10361)][(359,72,11318)(357,71,11406)(353,71,11431)(347,75,11455)(342,81,11479)(339,85,11503)(339,89,11535)(339,90,11559)(342,93,11583)(344,94,11654)(348,89,11679)(350,82,11703)(350,80,11727)(351,76,11750)(352,72,11799)(355,69,11823)(356,71,11879)(357,74,11904)(361,82,11927)(364,88,11951)(367,93,11983)(369,96,12223)(361,102,12247)(351,104,12271)(343,106,12295)(342,106,12343)(340,106,12367)(335,103,12391)(333,97,12414)(330,92,12439)(330,84,12463)(330,76,12487)(332,69,12511)(336,62,12543)(338,61,12591)(344,60,12615)(355,60,12639)(361,60,12671)(365,60,12694)(370,64,12726)(374,75,12758)(374,84,12783)(374,90,12807)(373,96,12831)(369,106,12855)(365,108,12886)(364,108,12967)(364,109,12983)(365,110,12993)][(101,155,13607)(99,155,13663)(91,155,13687)(86,153,13711)(85,142,13735)(84,136,13759)(84,131,13791)(86,130,13823)(95,130,13848)(102,134,13873)(102,142,13895)(103,151,13919)(103,157,13944)(101,164,13966)(90,166,13990)(81,166,14014)(76,166,14038)(75,166,14070)(70,166,14094)(64,162,14118)(60,160,14166)(60,159,14190)(60,155,14214)(66,152,14238)(83,152,14263)(92,152,14286)(98,154,14319)(102,157,14447)(103,158,14535)(104,159,14545)][(122,136,14751)(126,138,14790)(132,147,14814)(135,155,14839)(135,160,14880)(135,158,14935)(142,149,14959)(148,144,14982)(153,144,15006)(155,144,15031)(160,144,15054)(161,147,15086)(164,148,15190)(174,144,15215)(178,144,15247)(182,151,15271)(184,155,15399)(185,156,15409)][(208,145,15607)(205,145,15655)(201,147,15686)(201,153,15710)(201,156,15734)(203,157,15774)(211,157,15798)(219,152,15822)(219,146,15846)(220,146,15942)(225,153,15966)(233,159,15990)(239,161,16055)(242,161,16078)(244,160,16103)(245,159,16111)(246,160,16121)][(247,144,16303)(248,143,16327)(253,139,16351)(266,139,16375)(277,139,16399)(278,140,16471)(279,141,16481)][(272,146,16616)(272,147,16631)(272,151,16672)(272,153,16703)(272,156,16727)(273,163,16767)(273,165,16791)(274,166,16855)(275,167,16865)][(294,126,17455)(294,127,17504)(294,139,17528)(294,149,17551)(292,162,17575)(292,168,17600)(293,170,17760)(294,171,17770)][(308,166,17999)(309,166,18039)(312,166,18062)(316,167,18110)(317,168,18174)(318,169,18184)][(346,140,18431)(342,140,18470)(334,143,18495)(332,147,18519)(332,154,18543)(332,160,18567)(332,164,18606)(334,168,18631)(335,169,18654)(336,169,18711)(337,168,18727)(338,169,18737)][(356,152,18951)(356,151,18966)(347,151,18990)(345,151,19030)(345,154,19055)(345,159,19087)(345,160,19111)(347,161,19159)(353,161,19182)(356,157,19206)(357,154,19230)(358,152,19342)(358,151,19382)(359,152,19392)][(360,147,19640)(362,146,19679)(363,146,19710)(366,148,19734)(366,156,19759)(366,164,19782)(366,164,19895)(368,158,19952)(372,155,19978)(374,154,20087)(374,159,20111)(375,164,20238)(379,161,20263)(383,157,20286)(384,157,20406)(385,157,20430)(388,161,20454)(388,166,20478)(388,168,20510)(389,169,20711)(390,170,20721)]"

f = open('drawingimage.txt', 'rt')
stp = f.read()
f.close()

lsDraw = PaintBrush.str_to_nparrs(stp)
print(lsDraw)

class DrawObj:
    def __init__(self):
        self.params={}
        self.params['ptcnt']=0
        self.params['rmin']=0  # x,y
        self.params['rmax']=0
        self.params['draw']=None

    def load(self, stp):
        lsDraw = PaintBrush.str_to_nparrs(stp)
        self.params['ptcnt'] = 0
        rmax2=[]
        rmin2=[]
        for seg in lsDraw:
            self.params['ptcnt'] += len(seg)
            rmax = np.max(seg, axis=0)
            rmin = np.min(seg, axis=0)
            rmax2.append(rmax)
            rmin2.append(rmin)
        rmax2 = np.asarray(rmax2)
        rmin2 = np.asarray(rmin2)
        rmax2 = np.max(rmax2, axis=0)
        rmin2 = np.min(rmin2, axis=0)

        self.params['rmin'] = [ rmin2[0], rmin2[1] ]
        self.params['rmax'] = [ rmax2[0], rmax2[1] ]
        self.params['draw'] = lsDraw

picture1 = DrawObj()
picture1.load(stp)
print(picture1.params)

# default
ani_draw(picture1, True, False, 0)

